<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Microlith</title>
    <link>http://example.org/architecture/</link>
    <description>Recent content in Architecture on Microlith</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Oct 2018 18:18:21 -0600</lastBuildDate>
    
	<atom:link href="http://example.org/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Services</title>
      <link>http://example.org/architecture/services/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://example.org/architecture/services/</guid>
      <description>Business logic for an application is factored into Services. A Service is a REST API, a set of resources, and a set of asynchronous actions.
Serverless Services follow an AWS::Serverless model, containing resources such as Buckets, Tables, and Streams along with Lambda functions to asynchronously react to events on those resources. All external access to the resources goes through endpoints on a REST API.
Scope All resources in the service are available to all Lambdas in the service, but services cannot access resources outside of the ones they declare nor other services.</description>
    </item>
    
    <item>
      <title>Domains</title>
      <link>http://example.org/architecture/domains/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://example.org/architecture/domains/</guid>
      <description>Services are grouped into a Domain. A Domain is a REST API, a set of services, and set of channels.
Routing Domains route using REST. The API, called the Origin, handles all external traffic. It receives requests, makes calls on the services to collect state and perform business logic, and then constructs a response to the user.</description>
    </item>
    
    <item>
      <title>Channels</title>
      <link>http://example.org/architecture/channels/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://example.org/architecture/channels/</guid>
      <description>Services need to communicate, but cannot call endpoints on each other. To communicate between services, Microlith provides broadcast channels.
Any service can publish events onto channels it has references to. When a service publishes an event on a channel, all subscribed processors in all services receive that event.</description>
    </item>
    
    <item>
      <title>Application</title>
      <link>http://example.org/architecture/application/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://example.org/architecture/application/</guid>
      <description>An Application is the top-level container in a Microlith app. An application is a root domain, a set of named subdomains, and a set of global services and channels.
Routing An Application routes using DNS. The root domain is mounted under the top-level DNS name specified in the bootstrap process. All subdomains are mounted relative to the root domain.</description>
    </item>
    
    <item>
      <title>Globals</title>
      <link>http://example.org/architecture/globals/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://example.org/architecture/globals/</guid>
      <description>Some business logic needs to be shared between multiple domains, but services and subdomains cannot access each other. To share logic across the entire application, Microlith provides Global services and channels.
Services Global services share business logic across domains. They can be called by all services and origins.
Channels Global channels broadcast messages among all services and origins.</description>
    </item>
    
  </channel>
</rss>
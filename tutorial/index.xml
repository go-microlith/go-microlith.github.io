<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Microlith</title>
    <link>http://microlith-framework.com/tutorial/</link>
    <description>Recent content in Tutorial on Microlith</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Oct 2018 18:22:27 -0600</lastBuildDate>
    
	<atom:link href="http://microlith-framework.com/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started</title>
      <link>http://microlith-framework.com/tutorial/bootstrap/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/tutorial/bootstrap/</guid>
      <description>The tutorial will introduce you to Microlith by building a simple &amp;ldquo;Hello, world!&amp;rdquo; app. It&amp;rsquo;s not fancy: &amp;ldquo;GET /&amp;rdquo; returns &amp;ldquo;Hello, world!&amp;rdquo;. We&amp;rsquo;ll slowly refactor the application to show how to build a Microlith app. For a complete, non-trivial app, see the blog example.
The first step is to create an empty app and bootstrap it.
Create the Application A Microlith application is just an executable that calls microlith.Main(). Applications are named after domain names, such as &amp;ldquo;tutorial.</description>
    </item>
    
    <item>
      <title>Hello, World!</title>
      <link>http://microlith-framework.com/tutorial/root/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/tutorial/root/</guid>
      <description>To start, we will add a single &amp;ldquo;Hello, world!&amp;rdquo; endpoint to our application and redeploy. We will add the endpoint to the origin of the root domain. The root domain has a specialized API exposed via the top-level microlith package.
The Endpoint First, we will create an endpoint Lambda function. To create the Lambda, implement the Handler interface. The endpoint uses the Respond() helper to return a 200 response code and the string &amp;ldquo;Hello, world!</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>http://microlith-framework.com/tutorial/services/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/tutorial/services/</guid>
      <description>Although all external traffic goes through a domain&amp;rsquo;s origin API, the origin does not itself implement business logic. It makes calls on services and creates a response for the user.
Let&amp;rsquo;s show how this works by refactoring our root domain into services. We&amp;rsquo;ll create a Word service that returns a fixed word. Then we&amp;rsquo;ll create two instances of that service, one returning &amp;ldquo;hello&amp;rdquo; and one returning &amp;ldquo;world&amp;rdquo;, and register them with our domain.</description>
    </item>
    
    <item>
      <title>Channels</title>
      <link>http://microlith-framework.com/tutorial/channels/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/tutorial/channels/</guid>
      <description>The origin calls on services to implement business logic, but services within a domain cannot call each other. Instead, services communicate asynchronously using shared broadcast channels.
When events occur, such as a user deleting a business object, services publish those events to a channel. Services process events on the channel and update themselves according to their own internal business logic, such as purging their related objects.
Let&amp;rsquo;s create a channel for request events.</description>
    </item>
    
    <item>
      <title>Subdomains</title>
      <link>http://microlith-framework.com/tutorial/subdomains/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/tutorial/subdomains/</guid>
      <description>The application has a root domain and a set of subdomains, and it routes traffic to them using DNS. Each domain&amp;rsquo;s origin is mounted under a single DNS name. The root domain is mounted at the base DNS name you specified during the bootstrap process. The subdomains are named using subdomain prefixes, and are mounted as subdomains of the base DNS name.
Let&amp;rsquo;s create a domain named &amp;ldquo;sub&amp;rdquo; that mirrors the root domain.</description>
    </item>
    
    <item>
      <title>Globals</title>
      <link>http://microlith-framework.com/tutorial/globals/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/tutorial/globals/</guid>
      <description>The application has a special &amp;ldquo;pseudo-domain&amp;rdquo; called the globals. The globals are a set of services and channels that are shared between all domains. You can use them in any domain as if they were part of that domain.
Let&amp;rsquo;s factor some shared logic out of our application by promoting the &amp;ldquo;world&amp;rdquo; service to a global service. Since the service relies on the requests channel, the channel will need to be promoted to a global channel.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Buckets on Microlith</title>
    <link>http://microlith-framework.com/resources/blob/</link>
    <description>Recent content in Buckets on Microlith</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Oct 2018 18:10:01 -0600</lastBuildDate>
    
	<atom:link href="http://microlith-framework.com/resources/blob/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Working with Buckets</title>
      <link>http://microlith-framework.com/resources/blob/manipulator/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/resources/blob/manipulator/</guid>
      <description>Objects are added, updated, and removed from a bucket using a Manipulator.
Create a manipulator by passing a reference to a bucket:
mnip := blob.NewManipulator(images)  Get contents, err := mnip.Get(ctx, &amp;quot;/the/key&amp;quot;) if err != nil { log.Panic(err) } defer contents.Close()  io.Copy(os.Stdout, contents)  Put body, err := NewBufferString(&amp;quot;the-body&amp;quot;) if err != nil { log.Panic(err) } defer body.Close()  if err := mnip.Put(ctx, &amp;quot;/the/key&amp;quot;, body); err != nil { log.</description>
    </item>
    
    <item>
      <title>Observing Changes</title>
      <link>http://microlith-framework.com/resources/blob/observer/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/resources/blob/observer/</guid>
      <description>Observers are Lambda functions that observe buckets and are invoked when the buckets&amp;rsquo; contents change.
Observers cannot access buckets. This is due to a circular dependency in CloudFormation. If an observer needs to access buckets, a work around is to publish all events to a Stream and create a processor to perform the action.
 Create an Observer Create an observer by calling the Observer() function on a service builder, giving it a unique observer name and an S3 Lambda function.</description>
    </item>
    
  </channel>
</rss>
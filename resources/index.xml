<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Resources on Microlith</title>
    <link>http://microlith-framework.com/resources/</link>
    <description>Recent content in Resources on Microlith</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Oct 2018 18:10:01 -0600</lastBuildDate>
    
	<atom:link href="http://microlith-framework.com/resources/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Buckets</title>
      <link>http://microlith-framework.com/resources/blob/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/resources/blob/</guid>
      <description>Create a bucket by calling Bucket() on a service builder with a unique bucket name.
images := service.Bucket(&amp;quot;images&amp;quot;)  In Lambda functions, you can Get(), Put(), or Delete() objects in the bucket.
contents, err := images.Get(ctx, &amp;quot;/microlith/logo.png&amp;quot;) if err != nil { // ... } defer contents.Close() os.Copy(os.Stdout, contents)  Observers Observers are Lambda functions triggered when objects are added, updated, or deleted from buckets. Create an Observer Lambda by implementing the Observer interface.</description>
    </item>
    
    <item>
      <title>Tables</title>
      <link>http://microlith-framework.com/resources/stor/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/resources/stor/</guid>
      <description>Create a table by calling the Table() method on a service builder with a unique table name.
Tables are created with a hash (&amp;ldquo;partition&amp;rdquo;) key and an optional range (&amp;ldquo;sort&amp;rdquo;) key given as Attributes. Attributes can be created with the String(), Number(), and Binary() functions.
The streaming configuration must also be provided when the table is declared by passing a ChangeType value.
var artistKey = stor.String(&amp;quot;Artist&amp;quot;) var nameKey = stor.</description>
    </item>
    
    <item>
      <title>Streams</title>
      <link>http://microlith-framework.com/resources/strm/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/resources/strm/</guid>
      <description>Create a stream by calling Stream() on a service builder with a unique stream name
userSignups := service.Stream(&amp;quot;user-signups&amp;quot;)  In Lambda functions, you can Publish() messages to a stream. Streams automatically batch messages. To ensure that any pending messages are published, defer a call to Flush().
signup := &amp;amp;UserSignup{ Email: &amp;quot;john@doe.com&amp;quot;, At: time.Now(), } defer userSignups.Flush(ctx) if err := userSignups.Publish(ctx, &amp;quot;partition-key&amp;quot;, signup); err != nil { // ... }  Processors Processors are Lambda functions that are triggered when messages are published to streams.</description>
    </item>
    
    <item>
      <title>Endpoints</title>
      <link>http://microlith-framework.com/resources/rest/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/resources/rest/</guid>
      <description>Endpoints are Lambda functions triggered on HTTP requests. Create an Endpoint Lambda by implementing the Handler interface.
Within the handler Lambda functions, you can parse a RequestBody() as JSON and Respond() with JSON or an error. The path and query parameters and the request headers are available on the request object.
type echo struct {} func (*echo) ServeREST(ctx context.Context, req events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) { var body map[string]interface{} if err := rest.</description>
    </item>
    
    <item>
      <title>Schedued Jobs</title>
      <link>http://microlith-framework.com/resources/cron/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/resources/cron/</guid>
      <description>Jobs are Lambda functions that are triggered on a schedule. Create a Job Lambda by implementing the Job interface.
type purgeCache struct {} func (*purgeCache) Run(ctx context.Context, evt events.CloudWatchEvent) error { // ... }  Register the job by calling the Job() method on a service builder, giving it a unique job name, a schedule, and a Job Lambda. The schedule can be a simple time interval or a complex calendar, both expressed using CloudWatch Schedule Expressions.</description>
    </item>
    
    <item>
      <title>Log Readers</title>
      <link>http://microlith-framework.com/resources/inst/</link>
      <pubDate>Thu, 25 Oct 2018 18:10:01 -0600</pubDate>
      
      <guid>http://microlith-framework.com/resources/inst/</guid>
      <description>Readers are Lambda functions that read the logs of other Lambda functions. All console output from Lambdas is captured as CloudWatch Logs. Readers are triggered on log messages. Create a Reader Lambda by implementing the Reader interface.
type onError struct {} func (*onError) Read(ctx context.Context, evt events.CloudwatchLogsEvent) error { data, err := evt.AWSLogs.Parse() if err != nil { return err } for _, logEvent := range data.LogEvents { fmt.Printf(&amp;quot;Error found in log group %q: %s&amp;quot;, evt.</description>
    </item>
    
  </channel>
</rss>